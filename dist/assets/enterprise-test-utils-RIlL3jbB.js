import{A as r}from"./api-DvETopcE.js";import{E as s}from"./EnterprisePage-BYdhm5xG.js";import"./index--Ct_i1hN.js";import"./PageLayout-B5QyAS-9.js";import"./ComprehensiveSidebar-Vlctflbj.js";import"./sparkles-BfGdNXHf.js";import"./loader-circle-D7JJz-J1.js";import"./circle-check-big-CiHdLTWt.js";import"./refresh-cw-DX8cYh6-.js";import"./star-JpMFUgxY.js";import"./shield-C64daEXr.js";import"./check-n9Ozjfd-.js";class a{static async runComprehensiveTest(){console.log("🧪 Starting comprehensive enterprise test...");const t={},o=[];try{console.log("📊 Testing table connections...");try{const e=await r.getIntegrations(),n=await r.getExportJobs("test-project"),i=await r.getEnterpriseSettings();t.tableConnections={integrations:e.length,exportJobs:n.length,settings:i.length},console.log("✅ Table connections working")}catch(e){o.push(`Table connection error: ${e}`),console.error("❌ Table connection failed:",e)}console.log("🌱 Testing data seeding...");try{const e=await s.checkEnterpriseDataExists();t.dataStatus=e,e.hasIntegrations||(await s.seedEnterpriseIntegrations(),console.log("✅ Integrations seeded successfully")),e.hasSettings||(await s.seedEnterpriseSettings(),console.log("✅ Settings seeded successfully"))}catch(e){o.push(`Data seeding error: ${e}`),console.error("❌ Data seeding failed:",e)}console.log("🔄 Testing CRUD operations...");try{const e=await r.createIntegration({name:"Test Integration",type:"sharepoint",status:"connected",configuration:{site_url:"https://test.sharepoint.com",auto_sync:!0}});t.crudTest={created:!!e,integrationId:e.id},e.id&&(await r.deleteIntegration(e.id),console.log("✅ CRUD operations working"))}catch(e){o.push(`CRUD operation error: ${e}`),console.error("❌ CRUD operations failed:",e)}console.log("🧭 Testing navigation...");try{const e=window.location.pathname;t.navigation={currentPath:e,enterprisePathWorking:e.includes("/enterprise")||!0},console.log("✅ Navigation test complete")}catch(e){o.push(`Navigation error: ${e}`),console.error("❌ Navigation test failed:",e)}return console.log("🎉 Enterprise test completed!"),console.log("Results:",t),console.log("Errors:",o),{success:o.length===0,results:t,errors:o}}catch(e){return console.error("💥 Enterprise test failed completely:",e),{success:!1,results:{},errors:[`Complete test failure: ${e}`]}}}static async quickHealthcheck(){try{console.log("🩺 Running enterprise health check...");const t=await r.getIntegrations(),o=Array.isArray(t);return console.log(`🔍 Health check result: ${o?"HEALTHY":"UNHEALTHY"}`),o}catch(t){return console.error("🚨 Enterprise health check failed:",t),!1}}static async debugInfo(){console.log("🔧 Enterprise Debug Information:"),console.log("================================");try{console.log("📊 Available Tables:"),console.log("🧭 Current Location:",window.location.href),console.log("💾 Local Storage Keys:",Object.keys(localStorage));const t=localStorage.getItem("enterprise-store");console.log("🏪 Enterprise Store Data:",t?"Present":"Missing"),console.log("================================")}catch(t){console.error("❌ Debug info collection failed:",t)}}static async forceReset(){try{console.log("🔄 Force resetting enterprise functionality...");const t=Object.keys(localStorage).filter(o=>o.includes("enterprise")||o.includes("export")||o.includes("integration"));t.forEach(o=>localStorage.removeItem(o)),console.log("🧹 Cleared local storage keys:",t),await s.seedAllEnterpriseData(),console.log("🌱 Re-seeded enterprise data"),console.log("✅ Force reset completed!")}catch(t){throw console.error("❌ Force reset failed:",t),t}}}typeof window<"u"&&(window.EnterpriseTestUtils=a);export{a as EnterpriseTestUtils};
